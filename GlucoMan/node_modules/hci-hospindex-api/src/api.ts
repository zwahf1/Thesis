import {Promise} from 'es6-promise'

export type HttpMethod =
    'POST' |
    'PUT' |
    'GET' |
    'DELETE' ;

export interface ApiCallArgs {
    url: string;
    method: HttpMethod;
    headers?: any;
    payload?: any;
    jsonBody?: boolean;
}
;

export type imageType =
    'FRONT' |
    'BACK' |
    'DETAILFRONT' |
    'DETAILBACK' |
    'ALL';

export type grouping =
    'byProduct' |
    'byCheck';

export type extent =
    'compact' |
    'full';

export type checkType =
    'allergySubstance' |
    'allergyExcipient' |
    'doping' |
    'doubleMedication' |
    'elderly' |
    'interaction' |
    'interactionFlycicleCH' |
    'liverInsufficiency' |
    'nutrition' |
    'posology' |
    'reproduction' |
    'renalInsufficiency';


export interface check {
    check?: checkType, // Default / if empty or missing: error
    hideAbove?: number
}

export interface hciCdsCheckRequest {

    medication: string,
    extent?: extent,
    grouping?: grouping,
    checks: check[]
}


export interface hciQueryRequest {
    key: string;
    index?: string;
    keyType?: string;
}

export interface userCredentials {
    username: string;
    password: string;
}

export function hciQuery(requestParams: hciQueryRequest, credentials?: userCredentials) {

    let baseUrl = `https://index.hcisolutions.ch/index/current/get.aspx?schema=ARTICLE`;

    let queryParts = Object.keys(requestParams).map(key => {
        return key + '=' + requestParams[key]
    });

    let query = queryParts.join('&');
    query = query && `&${query}` || '';
    let url = baseUrl + query;

    let username = credentials.username || 'EPN236342@hcisolutions.ch';
    let password = credentials.password || 'UMPbDJu7!W';


    return _apiCall({
        url: url,
        method: "GET",
        headers: {
            'Authorization': 'Basic ' + btoa(`${username}:${password}`)
        },
        jsonBody: false
    }).then((rsp: any) => {
        return rsp;
    }).catch((err) => {
        return err;
    })
}

export function hciGetPictureByPharmaCode(pharmaCode: string, type?: imageType) {

    return new Promise(function (resolve, reject) {

        let _baseString = `https://apps.hcisolutions.ch/MyProducts/picture/${pharmaCode}/Pharmacode/`

        if (type === "FRONT") {
            _checkLink(`${_baseString}PA/Front/F`).then((msg) => {
                resolve(`${_baseString}PA/Front/F`);
            }).catch((err) => {
                reject("NO PICTURE AVAILABLE");
            })
        } else if (type === "BACK") {
            _checkLink(`${_baseString}PA/Back/F`).then((msg) => {
                resolve(`${_baseString}PA/Back/F`);
            }).catch((err) => {
                reject("NO PICTURE AVAILABLE");
            })
        } else if (type === "DETAILFRONT") {
            _checkLink(`${_baseString}BL/Front/F`).then((msg) => {
                resolve(`${_baseString}BL/Front/F`);
            }).catch((err) => {
                reject("NO PICTURE AVAILABLE");
            })
        }
        else if (type === "DETAILBACK") {
            _checkLink(`${_baseString}BL/Back/F`).then((msg) => {
                resolve(`${_baseString}BL/Back/F`);
            }).catch((err) => {
                reject("NO PICTURE AVAILABLE");
            })
        } else if (type === "ALL") {
            // TODO: Implement check for type 'ALL'
            resolve({
                front: `${_baseString}PA/Front/F`,
                back: `${_baseString}PA/Back/F`,
                detailFront: `${_baseString}BL/Front/F`,
                detailBack: `${_baseString}BL/Back/F`
            })
        }
    })
}

export function hciCdsCheck(requestParams: hciCdsCheckRequest) {
    return _apiCall({

        url: "https://int.hcisolutions.ch/MedicationActiveForm/cds/check",
        method: "POST",
        jsonBody: true,
        headers: {
            'Accept': 'application/json'
        },
        payload: requestParams
    }).then((rsp: any) => {
        return rsp;
    }).catch((err) => {
        return err;
    })
}


export function _checkLink(url: string) {

    return _apiCall({
        url: url,
        method: "GET"
    }).then((rsp: any) => {
        return rsp;
    }).catch((err) => {
        return err;
    })
}


export function _apiCall(args: ApiCallArgs) {

    let url = args.url;
    let method = args.method;
    let payload = args.payload;
    let headers = args.headers;
    let jsonBody = args.jsonBody || false;

    return new Promise(function (resolve, reject) {
        let xhr = new XMLHttpRequest();
        xhr.open(method, url, true);
        if (headers) {
            Object.keys(headers).forEach((key) => {
                xhr.setRequestHeader(key, headers[key]);
            });
        }
        xhr.onreadystatechange = function () {
            if (this.readyState === 4) {  // loaded
                let status = this.status;
                if (status >= 200 && status < 300) {  // successfuly

                    // check content-disposition
                    var disposition = xhr.getResponseHeader("Content-Disposition");
                    console.log(disposition);


                    let body: any;
                    if (jsonBody) {
                        body = JSON.parse(this.responseText);
                    } else {
                        body = this.responseText;
                    }
                    resolve({
                        message: 'Request successful',
                        body: body,
                        status: status
                    });
                } else {  // loaded but non-successful response
                    reject({
                        message: this.statusText,
                        body: this.responseText,
                        status: status
                    });
                }
            }
        };
        xhr.onerror = function () {
            reject({
                message: 'Network error',
                body: '',
                status: 0
            });
        }
        if (payload !== undefined) {
            xhr.send(JSON.stringify(payload));
        }
        else {
            xhr.send();
        }
    });
}

